// swift-interface-format-version: 1.0
// swift-compiler-version: Swift version 5.4.2 (swift-5.4.2-RELEASE)
// swift-module-flags: -target armv7-unknown-linux-android -disable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftGlibc -swift-version 5 -O -enforce-exclusivity=unchecked -module-name Glibc
import Swift
@_exported import SwiftGlibc
import SwiftOverlayShims
import SwiftShims
public var errno: Swift.Int32 {
  get
  set(val)
}
public func open(_ path: Swift.UnsafePointer<Swift.CChar>, _ oflag: Swift.Int32) -> Swift.Int32
public func open(_ path: Swift.UnsafePointer<Swift.CChar>, _ oflag: Swift.Int32, _ mode: SwiftGlibc.mode_t) -> Swift.Int32
public func openat(_ fd: Swift.Int32, _ path: Swift.UnsafePointer<Swift.CChar>, _ oflag: Swift.Int32) -> Swift.Int32
public func openat(_ fd: Swift.Int32, _ path: Swift.UnsafePointer<Swift.CChar>, _ oflag: Swift.Int32, _ mode: SwiftGlibc.mode_t) -> Swift.Int32
public func fcntl(_ fd: Swift.Int32, _ cmd: Swift.Int32) -> Swift.Int32
public func fcntl(_ fd: Swift.Int32, _ cmd: Swift.Int32, _ value: Swift.Int32) -> Swift.Int32
public func fcntl(_ fd: Swift.Int32, _ cmd: Swift.Int32, _ ptr: Swift.UnsafeMutableRawPointer) -> Swift.Int32
public var S_IFMT: SwiftGlibc.mode_t {
  get
}
public var S_IFIFO: SwiftGlibc.mode_t {
  get
}
public var S_IFCHR: SwiftGlibc.mode_t {
  get
}
public var S_IFDIR: SwiftGlibc.mode_t {
  get
}
public var S_IFBLK: SwiftGlibc.mode_t {
  get
}
public var S_IFREG: SwiftGlibc.mode_t {
  get
}
public var S_IFLNK: SwiftGlibc.mode_t {
  get
}
public var S_IFSOCK: SwiftGlibc.mode_t {
  get
}
public var S_IRWXU: SwiftGlibc.mode_t {
  get
}
public var S_IRUSR: SwiftGlibc.mode_t {
  get
}
public var S_IWUSR: SwiftGlibc.mode_t {
  get
}
public var S_IXUSR: SwiftGlibc.mode_t {
  get
}
public var S_IRWXG: SwiftGlibc.mode_t {
  get
}
public var S_IRGRP: SwiftGlibc.mode_t {
  get
}
public var S_IWGRP: SwiftGlibc.mode_t {
  get
}
public var S_IXGRP: SwiftGlibc.mode_t {
  get
}
public var S_IRWXO: SwiftGlibc.mode_t {
  get
}
public var S_IROTH: SwiftGlibc.mode_t {
  get
}
public var S_IWOTH: SwiftGlibc.mode_t {
  get
}
public var S_IXOTH: SwiftGlibc.mode_t {
  get
}
public var S_ISUID: SwiftGlibc.mode_t {
  get
}
public var S_ISGID: SwiftGlibc.mode_t {
  get
}
public var S_ISVTX: SwiftGlibc.mode_t {
  get
}
public func ioctl(_ fd: Swift.CInt, _ request: Swift.UInt, _ value: Swift.CInt) -> Swift.CInt
public func ioctl(_ fd: Swift.CInt, _ request: Swift.UInt, _ ptr: Swift.UnsafeMutableRawPointer) -> Swift.CInt
public func ioctl(_ fd: Swift.CInt, _ request: Swift.UInt) -> Swift.CInt
public typealias sighandler_t = SwiftGlibc.__sighandler_t
public var SIG_DFL: Glibc.sighandler_t? {
  get
}
public var SIG_IGN: Glibc.sighandler_t {
  get
}
public var SIG_ERR: Glibc.sighandler_t {
  get
}
public var SIG_HOLD: Glibc.sighandler_t {
  get
}
public typealias Semaphore = Swift.UnsafeMutablePointer<SwiftGlibc.sem_t>
public var SEM_FAILED: Glibc.Semaphore? {
  get
}
public func sem_open(_ name: Swift.UnsafePointer<Swift.CChar>, _ oflag: Swift.Int32) -> Glibc.Semaphore?
public func sem_open(_ name: Swift.UnsafePointer<Swift.CChar>, _ oflag: Swift.Int32, _ mode: SwiftGlibc.mode_t, _ value: Swift.CUnsignedInt) -> Glibc.Semaphore?
public enum POSIXErrorCode : Swift.Int32 {
  case EPERM
  case ENOENT
  case ESRCH
  case EINTR
  case EIO
  case ENXIO
  case E2BIG
  case ENOEXEC
  case EBADF
  case ECHILD
  case EAGAIN
  case ENOMEM
  case EACCES
  case EFAULT
  case ENOTBLK
  case EBUSY
  case EEXIST
  case EXDEV
  case ENODEV
  case ENOTDIR
  case EISDIR
  case EINVAL
  case ENFILE
  case EMFILE
  case ENOTTY
  case ETXTBSY
  case EFBIG
  case ENOSPC
  case ESPIPE
  case EROFS
  case EMLINK
  case EPIPE
  case EDOM
  case ERANGE
  case EDEADLK
  case ENAMETOOLONG
  case ENOLCK
  case ENOSYS
  case ENOTEMPTY
  case ELOOP
  public static var EWOULDBLOCK: Glibc.POSIXErrorCode {
    get
  }
  case ENOMSG
  case EIDRM
  case ECHRNG
  case EL2NSYNC
  case EL3HLT
  case EL3RST
  case ELNRNG
  case EUNATCH
  case ENOCSI
  case EL2HLT
  case EBADE
  case EBADR
  case EXFULL
  case ENOANO
  case EBADRQC
  case EBADSLT
  public static var EDEADLOCK: Glibc.POSIXErrorCode {
    get
  }
  case EBFONT
  case ENOSTR
  case ENODATA
  case ETIME
  case ENOSR
  case ENONET
  case ENOPKG
  case EREMOTE
  case ENOLINK
  case EADV
  case ESRMNT
  case ECOMM
  case EPROTO
  case EMULTIHOP
  case EDOTDOT
  case EBADMSG
  case EOVERFLOW
  case ENOTUNIQ
  case EBADFD
  case EREMCHG
  case ELIBACC
  case ELIBBAD
  case ELIBSCN
  case ELIBMAX
  case ELIBEXEC
  case EILSEQ
  case ERESTART
  case ESTRPIPE
  case EUSERS
  case ENOTSOCK
  case EDESTADDRREQ
  case EMSGSIZE
  case EPROTOTYPE
  case ENOPROTOOPT
  case EPROTONOSUPPORT
  case ESOCKTNOSUPPORT
  case EOPNOTSUPP
  case EPFNOSUPPORT
  case EAFNOSUPPORT
  case EADDRINUSE
  case EADDRNOTAVAIL
  case ENETDOWN
  case ENETUNREACH
  case ENETRESET
  case ECONNABORTED
  case ECONNRESET
  case ENOBUFS
  case EISCONN
  case ENOTCONN
  case ESHUTDOWN
  case ETOOMANYREFS
  case ETIMEDOUT
  case ECONNREFUSED
  case EHOSTDOWN
  case EHOSTUNREACH
  case EALREADY
  case EINPROGRESS
  case ESTALE
  case EUCLEAN
  case ENOTNAM
  case ENAVAIL
  case EISNAM
  case EREMOTEIO
  case EDQUOT
  case ENOMEDIUM
  case EMEDIUMTYPE
  case ECANCELED
  case ENOKEY
  case EKEYEXPIRED
  case EKEYREVOKED
  case EKEYREJECTED
  case EOWNERDEAD
  case ENOTRECOVERABLE
  case ERFKILL
  case EHWPOISON
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@available(swift, deprecated: 4.2, renamed: "abs")
@_transparent public func fabs<T>(_ x: T) -> T where T : Swift.FloatingPoint {
  return x.magnitude
}
@_transparent public func sqrt<T>(_ x: T) -> T where T : Swift.FloatingPoint {
  return x.squareRoot()
}
@_transparent public func fma<T>(_ x: T, _ y: T, _ z: T) -> T where T : Swift.FloatingPoint {
  return z.addingProduct(x, y)
}
@_transparent public func remainder<T>(_ x: T, _ y: T) -> T where T : Swift.FloatingPoint {
  return x.remainder(dividingBy: y)
}
@_transparent public func fmod<T>(_ x: T, _ y: T) -> T where T : Swift.FloatingPoint {
  return x.truncatingRemainder(dividingBy: y)
}
@_transparent public func ceil<T>(_ x: T) -> T where T : Swift.FloatingPoint {
  return x.rounded(.up)
}
@_transparent public func floor<T>(_ x: T) -> T where T : Swift.FloatingPoint {
  return x.rounded(.down)
}
@_transparent public func round<T>(_ x: T) -> T where T : Swift.FloatingPoint {
  return x.rounded()
}
@_transparent public func trunc<T>(_ x: T) -> T where T : Swift.FloatingPoint {
  return x.rounded(.towardZero)
}
@_transparent public func scalbn<T>(_ x: T, _ n: Swift.Int) -> T where T : Swift.FloatingPoint {
  return T(sign: .plus, exponent: T.Exponent(n), significand: x)
}
@_transparent public func modf<T>(_ x: T) -> (T, T) where T : Swift.FloatingPoint {
  // inf/NaN: return canonicalized x, fractional part zero.
  guard x.isFinite else { return (x+0, 0) }
  let integral = trunc(x)
  let fractional = x - integral
  return (integral, fractional)
}
@_transparent public func frexp<T>(_ x: T) -> (T, Swift.Int) where T : Swift.BinaryFloatingPoint {
  guard x.isFinite else { return (x+0, 0) }
  guard x != 0 else { return (x, 0) }
  // The C stdlib `frexp` uses a different notion of significand / exponent
  // than IEEE 754, so we need to adjust them by a factor of two.
  return (x.significand / 2, Int(x.exponent + 1))
}
@available(swift, deprecated: 4.2, renamed: "scalbn")
@_transparent public func ldexp(_ x: Swift.Float, _ n: Swift.Int) -> Swift.Float {
  return Float(sign: .plus, exponent: n, significand: x)
}
@available(swift, deprecated: 4.2, renamed: "scalbn")
@_transparent public func ldexp(_ x: Swift.Double, _ n: Swift.Int) -> Swift.Double {
  return Double(sign: .plus, exponent: n, significand: x)
}
@available(*, unavailable, message: "use the floatingPointClass property.")
public func fpclassify<T>(_ value: T) -> Swift.Int where T : Swift.FloatingPoint
@available(*, unavailable, message: "use the isNormal property.")
public func isnormal<T>(_ value: T) -> Swift.Bool where T : Swift.FloatingPoint
@available(*, unavailable, message: "use the isFinite property.")
public func isfinite<T>(_ value: T) -> Swift.Bool where T : Swift.FloatingPoint
@available(*, unavailable, message: "use the isInfinite property.")
public func isinf<T>(_ value: T) -> Swift.Bool where T : Swift.FloatingPoint
@available(*, unavailable, message: "use the isNaN property.")
public func isnan<T>(_ value: T) -> Swift.Bool where T : Swift.FloatingPoint
@available(*, unavailable, message: "use the sign property.")
public func signbit<T>(_ value: T) -> Swift.Int where T : Swift.FloatingPoint
@available(swift, deprecated: 4.2, message: "use the exponent property.")
public func ilogb<T>(_ x: T) -> Swift.Int where T : Swift.BinaryFloatingPoint
@_transparent public func acos(_ x: Swift.Float) -> Swift.Float {
  return Float(acosf(CFloat(x)))
}
@_transparent public func asin(_ x: Swift.Float) -> Swift.Float {
  return Float(asinf(CFloat(x)))
}
@_transparent public func atan(_ x: Swift.Float) -> Swift.Float {
  return Float(atanf(CFloat(x)))
}
@_transparent public func tan(_ x: Swift.Float) -> Swift.Float {
  return Float(tanf(CFloat(x)))
}
@_transparent public func acosh(_ x: Swift.Float) -> Swift.Float {
  return Float(acoshf(CFloat(x)))
}
@_transparent public func asinh(_ x: Swift.Float) -> Swift.Float {
  return Float(asinhf(CFloat(x)))
}
@_transparent public func atanh(_ x: Swift.Float) -> Swift.Float {
  return Float(atanhf(CFloat(x)))
}
@_transparent public func cosh(_ x: Swift.Float) -> Swift.Float {
  return Float(coshf(CFloat(x)))
}
@_transparent public func sinh(_ x: Swift.Float) -> Swift.Float {
  return Float(sinhf(CFloat(x)))
}
@_transparent public func tanh(_ x: Swift.Float) -> Swift.Float {
  return Float(tanhf(CFloat(x)))
}
@_transparent public func expm1(_ x: Swift.Float) -> Swift.Float {
  return Float(expm1f(CFloat(x)))
}
@_transparent public func log1p(_ x: Swift.Float) -> Swift.Float {
  return Float(log1pf(CFloat(x)))
}
@_transparent public func logb(_ x: Swift.Float) -> Swift.Float {
  return Float(logbf(CFloat(x)))
}
@_transparent public func cbrt(_ x: Swift.Float) -> Swift.Float {
  return Float(cbrtf(CFloat(x)))
}
@_transparent public func erf(_ x: Swift.Float) -> Swift.Float {
  return Float(erff(CFloat(x)))
}
@_transparent public func erfc(_ x: Swift.Float) -> Swift.Float {
  return Float(erfcf(CFloat(x)))
}
@_transparent public func tgamma(_ x: Swift.Float) -> Swift.Float {
  return Float(tgammaf(CFloat(x)))
}
@_transparent public func cos(_ x: Swift.Float) -> Swift.Float {
  return Float(cosf(CFloat(x)))
}
@_transparent public func sin(_ x: Swift.Float) -> Swift.Float {
  return Float(sinf(CFloat(x)))
}
@_transparent public func exp(_ x: Swift.Float) -> Swift.Float {
  return Float(expf(CFloat(x)))
}
@_transparent public func exp2(_ x: Swift.Float) -> Swift.Float {
  return Float(exp2f(CFloat(x)))
}
@_transparent public func log(_ x: Swift.Float) -> Swift.Float {
  return Float(logf(CFloat(x)))
}
@_transparent public func log10(_ x: Swift.Float) -> Swift.Float {
  return Float(log10f(CFloat(x)))
}
@_transparent public func log2(_ x: Swift.Float) -> Swift.Float {
  return Float(log2f(CFloat(x)))
}
@_transparent public func nearbyint(_ x: Swift.Float) -> Swift.Float {
  return Float(nearbyintf(CFloat(x)))
}
@_transparent public func rint(_ x: Swift.Float) -> Swift.Float {
  return Float(rintf(CFloat(x)))
}
@_transparent public func atan2(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
  return Float(atan2f(CFloat(lhs), CFloat(rhs)))
}
@_transparent public func hypot(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
  return Float(hypotf(CFloat(lhs), CFloat(rhs)))
}
@_transparent public func pow(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
  return Float(powf(CFloat(lhs), CFloat(rhs)))
}
@_transparent public func copysign(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
  return Float(copysignf(CFloat(lhs), CFloat(rhs)))
}
@_transparent public func nextafter(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
  return Float(nextafterf(CFloat(lhs), CFloat(rhs)))
}
@_transparent public func fdim(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
  return Float(fdimf(CFloat(lhs), CFloat(rhs)))
}
@_transparent public func fmax(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
  return Float(fmaxf(CFloat(lhs), CFloat(rhs)))
}
@_transparent public func fmin(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
  return Float(fminf(CFloat(lhs), CFloat(rhs)))
}
@_transparent public func lgamma(_ x: Swift.Float) -> (Swift.Float, Swift.Int) {
  var sign = Int32(0)
  let value = lgammaf_r(CFloat(x), &sign)
  return (Float(value), Int(sign))
}
@_transparent public func lgamma(_ x: Swift.Double) -> (Swift.Double, Swift.Int) {
  var sign = Int32(0)
  let value = lgamma_r(CDouble(x), &sign)
  return (Double(value), Int(sign))
}
@_transparent public func remquo(_ x: Swift.Float, _ y: Swift.Float) -> (Swift.Float, Swift.Int) {
  var quo = Int32(0)
  let rem = remquof(CFloat(x), CFloat(y), &quo)
  return (Float(rem), Int(quo))
}
@_transparent public func remquo(_ x: Swift.Double, _ y: Swift.Double) -> (Swift.Double, Swift.Int) {
  var quo = Int32(0)
  let rem = remquo(CDouble(x), CDouble(y), &quo)
  return (Double(rem), Int(quo))
}
@available(swift, deprecated: 4.2, message: "use Float(nan: Float.RawSignificand).")
@_transparent public func nan(_ tag: Swift.String) -> Swift.Float {
  return Float(nanf(tag))
}
@_transparent public func jn(_ n: Swift.Int, _ x: Swift.Double) -> Swift.Double {
  return jn(Int32(n), x)
}
@_transparent public func yn(_ n: Swift.Int, _ x: Swift.Double) -> Swift.Double {
  return yn(Int32(n), x)
}
public let MAP_FAILED: Swift.UnsafeMutableRawPointer!
@available(swift, deprecated: 3.0, message: "Please use 'Double.pi' or '.pi' to get the value of correct type and avoid casting.")
public let M_PI: Swift.Double
@available(swift, deprecated: 3.0, message: "Please use 'Double.pi / 2' or '.pi / 2' to get the value of correct type and avoid casting.")
public let M_PI_2: Swift.Double
@available(swift, deprecated: 3.0, message: "Please use 'Double.pi / 4' or '.pi / 4' to get the value of correct type and avoid casting.")
public let M_PI_4: Swift.Double
@available(swift, deprecated: 3.0, message: "Please use '2.squareRoot()'.")
public let M_SQRT2: Swift.Double
@available(swift, deprecated: 3.0, message: "Please use '0.5.squareRoot()'.")
public let M_SQRT1_2: Swift.Double
@available(swift, deprecated: 3.0, message: "Please use 'T.radix' to get the radix of a FloatingPoint type 'T'.")
public let FLT_RADIX: Swift.Int
@available(swift, deprecated: 3.0, message: "Please use 'Float.significandBitCount + 1'.")
public let FLT_MANT_DIG: Swift.Int
@available(swift, deprecated: 3.0, message: "Please use 'Float.greatestFiniteMagnitude.exponent + 1'.")
public let FLT_MAX_EXP: Swift.Int
@available(swift, deprecated: 3.0, message: "Please use 'Float.leastNormalMagnitude.exponent + 1'.")
public let FLT_MIN_EXP: Swift.Int
@available(swift, deprecated: 3.0, message: "Please use 'Float.greatestFiniteMagnitude' or '.greatestFiniteMagnitude'.")
public let FLT_MAX: Swift.Float
@available(swift, deprecated: 3.0, message: "Please use 'Float.ulpOfOne' or '.ulpOfOne'.")
public let FLT_EPSILON: Swift.Float
@available(swift, deprecated: 3.0, message: "Please use 'Float.leastNormalMagnitude' or '.leastNormalMagnitude'.")
public let FLT_MIN: Swift.Float
@available(swift, deprecated: 3.0, message: "Please use 'Float.leastNonzeroMagnitude' or '.leastNonzeroMagnitude'.")
public let FLT_TRUE_MIN: Swift.Float
@available(swift, deprecated: 3.0, message: "Please use 'Double.significandBitCount + 1'.")
public let DBL_MANT_DIG: Swift.Int
@available(swift, deprecated: 3.0, message: "Please use 'Double.greatestFiniteMagnitude.exponent + 1'.")
public let DBL_MAX_EXP: Swift.Int
@available(swift, deprecated: 3.0, message: "Please use 'Double.leastNormalMagnitude.exponent + 1'.")
public let DBL_MIN_EXP: Swift.Int
@available(swift, deprecated: 3.0, message: "Please use 'Double.greatestFiniteMagnitude' or '.greatestFiniteMagnitude'.")
public let DBL_MAX: Swift.Double
@available(swift, deprecated: 3.0, message: "Please use 'Double.ulpOfOne' or '.ulpOfOne'.")
public let DBL_EPSILON: Swift.Double
@available(swift, deprecated: 3.0, message: "Please use 'Double.leastNormalMagnitude' or '.leastNormalMagnitude'.")
public let DBL_MIN: Swift.Double
@available(swift, deprecated: 3.0, message: "Please use 'Double.leastNonzeroMagnitude' or '.leastNonzeroMagnitude'.")
public let DBL_TRUE_MIN: Swift.Double
extension Glibc.POSIXErrorCode : Swift.Equatable {}
extension Glibc.POSIXErrorCode : Swift.Hashable {}
extension Glibc.POSIXErrorCode : Swift.RawRepresentable {}
